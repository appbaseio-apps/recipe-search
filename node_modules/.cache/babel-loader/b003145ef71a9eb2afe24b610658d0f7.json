{"ast":null,"code":"var _jsxFileName = \"/Users/mohdashraf/Desktop/appbase-apps/recipes-search/src/components/FiltersContainer.js\",\n    _s = $RefreshSig$();\n\nimport { SearchComponent } from \"@appbaseio/react-searchbox\";\nimport { Button, Col } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport FiltersRenderer from \"./FiltersRenderer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FiltersContainer = () => {\n  _s();\n\n  const [isMobileView, setIsMobileView] = useState(false); //state variable(boolean) depicting mobile view or otherwise\n\n  const [showFilterOptions, setShowFilterOptions] = useState(false); //used in mobile view to show/ hide filter options (ingredient in this case)\n\n  useEffect(() => {\n    var _window;\n\n    // using resize listener for applying mobile responsiveness programatically\n    if (((_window = window) === null || _window === void 0 ? void 0 : _window.innerWidth) <= 600) {\n      !isMobileView && setIsMobileView(true);\n    }\n\n    const windowResizeHandler = () => {\n      var _window2;\n\n      if (((_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.innerWidth) <= 600) {\n        setIsMobileView(true);\n      } else {\n        setIsMobileView(false);\n      }\n    };\n\n    window.addEventListener(\"resize\", windowResizeHandler);\n    return () => {\n      window.removeEventListener(\"resize\", windowResizeHandler);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Col, {\n    xs: 20,\n    sm: 20,\n    md: 24,\n    lg: 6,\n    xl: 6,\n    className: `${isMobileView && showFilterOptions ? \"show-ingredients-full-screen\" : \"\"}`,\n    children: [isMobileView && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => setShowFilterOptions(!showFilterOptions),\n      children: [showFilterOptions ? \"Hide\" : \"Show\", \" Filters\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SearchComponent, {\n      id: \"ingredient-filter\",\n      type: \"term\",\n      queryFormat: \"and\",\n      highlight: true,\n      aggregationSize: 30,\n      dataField: \"NER.keyword\",\n      subscribeTo: [\"aggregationData\", \"requestStatus\", \"value\"],\n      react: {\n        and: [\"search-component\"]\n      },\n      value: [],\n      render: ({\n        aggregationData,\n        loading,\n        value,\n        setValue\n      }) => {\n        //Component for rendering Ingredient Filters\n        return /*#__PURE__*/_jsxDEV(FiltersRenderer, {\n          showFilterOptions: showFilterOptions,\n          isMobileView: isMobileView,\n          loading: loading,\n          value: value,\n          rawFilterData: aggregationData,\n          setValue: setValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FiltersContainer, \"4p7+8nga2bmQ5IQv1mWT/15w2mk=\");\n\n_c = FiltersContainer;\nexport default FiltersContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"FiltersContainer\");","map":{"version":3,"sources":["/Users/mohdashraf/Desktop/appbase-apps/recipes-search/src/components/FiltersContainer.js"],"names":["SearchComponent","Button","Col","React","useEffect","useState","FiltersRenderer","FiltersContainer","isMobileView","setIsMobileView","showFilterOptions","setShowFilterOptions","window","innerWidth","windowResizeHandler","addEventListener","removeEventListener","and","aggregationData","loading","value","setValue"],"mappings":";;;AAAA,SAASA,eAAT,QAAgC,4BAAhC;AACA,SAASC,MAAT,EAAiBC,GAAjB,QAA4B,MAA5B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,KAAD,CAAhD,CAD6B,CAC4B;;AAEzD,QAAM,CAACK,iBAAD,EAAoBC,oBAApB,IAA4CN,QAAQ,CAAC,KAAD,CAA1D,CAH6B,CAGsC;;AAEnED,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd;AACA,QAAI,YAAAQ,MAAM,UAAN,0CAAQC,UAAR,KAAsB,GAA1B,EAA+B;AAC7B,OAACL,YAAD,IAAiBC,eAAe,CAAC,IAAD,CAAhC;AACD;;AAED,UAAMK,mBAAmB,GAAG,MAAM;AAAA;;AAChC,UAAI,aAAAF,MAAM,UAAN,4CAAQC,UAAR,KAAsB,GAA1B,EAA+B;AAC7BJ,QAAAA,eAAe,CAAC,IAAD,CAAf;AACD,OAFD,MAEO;AACLA,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,KAND;;AAOAG,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCD,mBAAlC;AAEA,WAAO,MAAM;AACXF,MAAAA,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCF,mBAArC;AACD,KAFD;AAGD,GAlBQ,EAkBN,EAlBM,CAAT;AAmBA,sBACE,QAAC,GAAD;AACE,IAAA,EAAE,EAAE,EADN;AAEE,IAAA,EAAE,EAAE,EAFN;AAGE,IAAA,EAAE,EAAE,EAHN;AAIE,IAAA,EAAE,EAAE,CAJN;AAKE,IAAA,EAAE,EAAE,CALN;AAME,IAAA,SAAS,EAAG,GACVN,YAAY,IAAIE,iBAAhB,GAAoC,8BAApC,GAAqE,EACtE,EARH;AAAA,eAUGF,YAAY,iBACX,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,MAAMG,oBAAoB,CAAC,CAACD,iBAAF,CAA3C;AAAA,iBACGA,iBAAiB,GAAG,MAAH,GAAY,MADhC;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ,eAsDE,QAAC,eAAD;AACE,MAAA,EAAE,EAAC,mBADL;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,WAAW,EAAC,KAHd;AAIE,MAAA,SAAS,MAJX;AAKE,MAAA,eAAe,EAAE,EALnB;AAME,MAAA,SAAS,EAAC,aANZ;AAOE,MAAA,WAAW,EAAE,CAAC,iBAAD,EAAoB,eAApB,EAAqC,OAArC,CAPf;AAQE,MAAA,KAAK,EAAE;AACLO,QAAAA,GAAG,EAAE,CAAC,kBAAD;AADA,OART;AAWE,MAAA,KAAK,EAAE,EAXT;AAYE,MAAA,MAAM,EAAE,CAAC;AAAEC,QAAAA,eAAF;AAAmBC,QAAAA,OAAnB;AAA4BC,QAAAA,KAA5B;AAAmCC,QAAAA;AAAnC,OAAD,KAAmD;AACzD;AACA,4BACE,QAAC,eAAD;AACE,UAAA,iBAAiB,EAAEX,iBADrB;AAEE,UAAA,YAAY,EAAEF,YAFhB;AAGE,UAAA,OAAO,EAAEW,OAHX;AAIE,UAAA,KAAK,EAAEC,KAJT;AAKE,UAAA,aAAa,EAAEF,eALjB;AAME,UAAA,QAAQ,EAAEG;AANZ;AAAA;AAAA;AAAA;AAAA,gBADF;AAUD;AAxBH;AAAA;AAAA;AAAA;AAAA,YAtDF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmFD,CA3GD;;GAAMd,gB;;KAAAA,gB;AA6GN,eAAeA,gBAAf","sourcesContent":["import { SearchComponent } from \"@appbaseio/react-searchbox\";\nimport { Button, Col } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport FiltersRenderer from \"./FiltersRenderer\";\n\nconst FiltersContainer = () => {\n  const [isMobileView, setIsMobileView] = useState(false); //state variable(boolean) depicting mobile view or otherwise\n\n  const [showFilterOptions, setShowFilterOptions] = useState(false); //used in mobile view to show/ hide filter options (ingredient in this case)\n\n  useEffect(() => {\n    // using resize listener for applying mobile responsiveness programatically\n    if (window?.innerWidth <= 600) {\n      !isMobileView && setIsMobileView(true);\n    }\n\n    const windowResizeHandler = () => {\n      if (window?.innerWidth <= 600) {\n        setIsMobileView(true);\n      } else {\n        setIsMobileView(false);\n      }\n    };\n    window.addEventListener(\"resize\", windowResizeHandler);\n\n    return () => {\n      window.removeEventListener(\"resize\", windowResizeHandler);\n    };\n  }, []);\n  return (\n    <Col\n      xs={20}\n      sm={20}\n      md={24}\n      lg={6}\n      xl={6}\n      className={`${\n        isMobileView && showFilterOptions ? \"show-ingredients-full-screen\" : \"\"\n      }`}\n    >\n      {isMobileView && (\n        <Button onClick={() => setShowFilterOptions(!showFilterOptions)}>\n          {showFilterOptions ? \"Hide\" : \"Show\"} Filters\n        </Button>\n      )}\n      {/* Searchbox for searching through ingredients\n      {((isMobileView && showFilterOptions) || !isMobileView) && (\n        <SearchBox\n          queryFormat=\"and\"\n          className={`${\n            !showFilterOptions && isMobileView\n              ? \"isIngredientHidden ingredient-search-box\"\n              : \"ingredient-search-box\"\n          }`}\n          id=\"filter-search-component\"\n          dataField={[\n            {\n              field: \"NER.keyword\",\n              weight: 4,\n            },\n          ]}\n          title={\n            <div className=\"filter-search-component__title\">\n              <span>Ingredient Filter</span>\n              {isMobileView && (\n                <Button\n                  onClick={() => setShowFilterOptions(!showFilterOptions)}\n                >\n                  {showFilterOptions ? \"Hide\" : \"Show\"} Filters\n                </Button>\n              )}\n            </div>\n          }\n          placeholder=\"Try searching : 'salt' or 'sugar'\"\n          autosuggest={true}\n          debounce={100}\n          fuzziness=\"AUTO\"\n          showClear\n          URLParams\n          iconPosition=\"left\"\n          enablePredictiveSuggestions={true}\n        />\n      )} */}\n      {/* Search component displaying ingredient filters facets */}\n      <SearchComponent\n        id=\"ingredient-filter\"\n        type=\"term\"\n        queryFormat=\"and\"\n        highlight\n        aggregationSize={30}\n        dataField=\"NER.keyword\"\n        subscribeTo={[\"aggregationData\", \"requestStatus\", \"value\"]}\n        react={{\n          and: [\"search-component\"],\n        }}\n        value={[]}\n        render={({ aggregationData, loading, value, setValue }) => {\n          //Component for rendering Ingredient Filters\n          return (\n            <FiltersRenderer\n              showFilterOptions={showFilterOptions}\n              isMobileView={isMobileView}\n              loading={loading}\n              value={value}\n              rawFilterData={aggregationData}\n              setValue={setValue}\n            />\n          );\n        }}\n      />\n    </Col>\n  );\n};\n\nexport default FiltersContainer;\n"]},"metadata":{},"sourceType":"module"}