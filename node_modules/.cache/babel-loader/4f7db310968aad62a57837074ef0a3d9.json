{"ast":null,"code":"var _jsxFileName = \"/Users/mohdashraf/Desktop/appbase-apps/recipes-search/src/components/FiltersRenderer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Col, Row, Spin, Tag } from \"antd\";\nimport { PlusCircleTwoTone, MinusCircleTwoTone } from \"@ant-design/icons\";\nimport \"./../assets/styles/filtersRenderer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  CheckableTag\n} = Tag;\n\nconst FiltersRenderer = ({\n  showFilterOptions,\n  isMobileView,\n  loading,\n  value,\n  rawFilterData,\n  setValue\n}) => {\n  _s();\n\n  const [showAllFilters, setShowAllFilters] = useState(false); //used for displaying all available filters at once\n\n  const [sortedFilters, setSortedFilters] = useState([]); // an array that would have sorted filters' list based on selected/ not-selected\n\n  const [selectedFilters, setSelectedFilters] = useState([]);\n  useEffect(() => {\n    var _rawFilterData$data;\n\n    //applying logic for having the selected filters always in front of array and rest following them\n    let tempSortedFilters = [];\n    rawFilterData === null || rawFilterData === void 0 ? void 0 : (_rawFilterData$data = rawFilterData.data) === null || _rawFilterData$data === void 0 ? void 0 : _rawFilterData$data.forEach(item => {\n      if (!selectedFilters.includes(item._key.toLowerCase())) {\n        tempSortedFilters.push(item);\n      } else {\n        tempSortedFilters.unshift(item);\n      }\n    });\n    setSortedFilters(tempSortedFilters);\n  }, [rawFilterData.data, selectedFilters]);\n  useEffect(() => {\n    if (value && selectedFilters.join(\"|\") !== value.map(item => item.toLowerCase()).join(\"|\")) {\n      setSelectedFilters( //value prop gives us all the selected filters(ingredients)\n      value // storing selected filters' names in a separate variable\n      ? value.map(item => item.toLowerCase()) : []);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: !showFilterOptions && isMobileView ? \" filter-container isIngredientHidden\" : \"filter-container\",\n    children: loading ? /*#__PURE__*/_jsxDEV(Row, {\n      justify: \"center\",\n      align: \"middle\",\n      gutter: [24, 24],\n      className: \"spinner-container\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(Col, {\n        span: 24,\n        children: /*#__PURE__*/_jsxDEV(Spin, {\n          spinning: loading,\n          size: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [sortedFilters //showing only 7 or less filters by default; based on users'choice and device width\n      .slice(0, Math.max(7, showAllFilters || isMobileView ? sortedFilters.length : 7)).map(item => {\n        const isChecked = value ? selectedFilters.includes(item._key.toLowerCase()) : false;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"list-item\",\n          children: /*#__PURE__*/_jsxDEV(CheckableTag, {\n            checked: isChecked,\n            onChange: checked => {\n              let values = value || [];\n\n              if (!checked) {\n                values = [...values.filter(valueItem => valueItem != item._key)];\n              } else {\n                values.push(item._key);\n              } // Set filter value and trigger custom query\n\n\n              setValue(values, {\n                triggerDefaultQuery: false,\n                triggerCustomQuery: true,\n                stateChanges: true\n              });\n            },\n            children: [isChecked ? /*#__PURE__*/_jsxDEV(MinusCircleTwoTone, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 34\n            }, this) : /*#__PURE__*/_jsxDEV(PlusCircleTwoTone, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 59\n            }, this), \" \", `${item._key} ( ${new Intl.NumberFormat(\"en-US\", {\n              maximumSignificantDigits: 3\n            }).format(item._doc_count)} )`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 19\n          }, this)\n        }, item._key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this);\n      }), !isMobileView && /*#__PURE__*/_jsxDEV(Col, {\n        span: 24,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          onClick: () => setShowAllFilters(!showAllFilters),\n          children: [\"Show \", showAllFilters ? \"Less\" : \"More\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FiltersRenderer, \"B9N64LT2CY2rbGfniq9PTmmvOEA=\");\n\n_c = FiltersRenderer;\nexport default FiltersRenderer;\n\nvar _c;\n\n$RefreshReg$(_c, \"FiltersRenderer\");","map":{"version":3,"sources":["/Users/mohdashraf/Desktop/appbase-apps/recipes-search/src/components/FiltersRenderer.js"],"names":["React","useEffect","useState","Button","Col","Row","Spin","Tag","PlusCircleTwoTone","MinusCircleTwoTone","CheckableTag","FiltersRenderer","showFilterOptions","isMobileView","loading","value","rawFilterData","setValue","showAllFilters","setShowAllFilters","sortedFilters","setSortedFilters","selectedFilters","setSelectedFilters","tempSortedFilters","data","forEach","item","includes","_key","toLowerCase","push","unshift","join","map","slice","Math","max","length","isChecked","checked","values","filter","valueItem","triggerDefaultQuery","triggerCustomQuery","stateChanges","Intl","NumberFormat","maximumSignificantDigits","format","_doc_count"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Col, Row, Spin, Tag } from \"antd\";\nimport { PlusCircleTwoTone, MinusCircleTwoTone } from \"@ant-design/icons\";\nimport \"./../assets/styles/filtersRenderer.css\";\nconst { CheckableTag } = Tag;\n\nconst FiltersRenderer = ({\n  showFilterOptions,\n  isMobileView,\n  loading,\n  value,\n  rawFilterData,\n  setValue,\n}) => {\n  const [showAllFilters, setShowAllFilters] = useState(false); //used for displaying all available filters at once\n  const [sortedFilters, setSortedFilters] = useState([]); // an array that would have sorted filters' list based on selected/ not-selected\n  const [selectedFilters, setSelectedFilters] = useState([]);\n  useEffect(() => {\n    //applying logic for having the selected filters always in front of array and rest following them\n    let tempSortedFilters = [];\n    rawFilterData?.data?.forEach((item) => {\n      if (!selectedFilters.includes(item._key.toLowerCase())) {\n        tempSortedFilters.push(item);\n      } else {\n        tempSortedFilters.unshift(item);\n      }\n    });\n    setSortedFilters(tempSortedFilters);\n  }, [rawFilterData.data, selectedFilters]);\n\n  useEffect(() => {\n    if (\n      value &&\n      selectedFilters.join(\"|\") !==\n        value.map((item) => item.toLowerCase()).join(\"|\")\n    ) {\n      setSelectedFilters(\n        //value prop gives us all the selected filters(ingredients)\n        value // storing selected filters' names in a separate variable\n          ? value.map((item) => item.toLowerCase())\n          : []\n      );\n    }\n  });\n  return (\n    <div\n      className={\n        !showFilterOptions && isMobileView\n          ? \" filter-container isIngredientHidden\"\n          : \"filter-container\"\n      }\n    >\n      {loading ? (\n        <Row\n          justify=\"center\"\n          align=\"middle\"\n          gutter={[24, 24]}\n          className=\"spinner-container\"\n        >\n          {\" \"}\n          <Col span={24}>\n            <Spin spinning={loading} size=\"large\"></Spin>\n          </Col>\n        </Row>\n      ) : (\n        <>\n          {sortedFilters //showing only 7 or less filters by default; based on users'choice and device width\n            .slice(\n              0,\n              Math.max(\n                7,\n                showAllFilters || isMobileView ? sortedFilters.length : 7\n              )\n            )\n            .map((item) => {\n              const isChecked = value\n                ? selectedFilters.includes(item._key.toLowerCase())\n                : false;\n              return (\n                <div className=\"list-item\" key={item._key}>\n                  <CheckableTag\n                    checked={isChecked}\n                    onChange={(checked) => {\n                      let values = value || [];\n                      if (!checked) {\n                        values = [\n                          ...values.filter(\n                            (valueItem) => valueItem != item._key\n                          ),\n                        ];\n                      } else {\n                        values.push(item._key);\n                      }\n                      // Set filter value and trigger custom query\n                      setValue(values, {\n                        triggerDefaultQuery: false,\n                        triggerCustomQuery: true,\n                        stateChanges: true,\n                      });\n                    }}\n                  >\n                    {isChecked ? <MinusCircleTwoTone /> : <PlusCircleTwoTone />}{\" \"}\n                    {`${item._key} ( ${new Intl.NumberFormat(\"en-US\", {\n                      maximumSignificantDigits: 3,\n                    }).format(item._doc_count)} )`}\n                  </CheckableTag>\n                </div>\n              );\n            })}\n\n          {/* //for desktop only */}\n          {!isMobileView && (\n            <Col span={24}>\n              <Button\n                type=\"primary\"\n                onClick={() => setShowAllFilters(!showAllFilters)}\n              >\n                Show {showAllFilters ? \"Less\" : \"More\"}\n              </Button>\n            </Col>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default FiltersRenderer;\n"]},"metadata":{},"sourceType":"module"}